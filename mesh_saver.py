#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Mesh Saver Module: Responsible for saving transformed meshes to OBJ files
"""

import numpy as np

def save_obj(file_path, vertices, faces, normals=None, texcoords=None):
    """
    Save mesh to an OBJ file
    
    Parameters:
        file_path (str): Output OBJ file path
        vertices (numpy.ndarray): Vertex coordinates array
        faces (list): Face indices list
        normals (numpy.ndarray, optional): Normal vectors array
        texcoords (numpy.ndarray, optional): Texture coordinates array
    """
    with open(file_path, 'w') as f:
        # Write header
        f.write("# OBJ file generated by 3D Mesh Transformation Tool\n\n")
        
        # Write vertices
        for v in vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        
        # Write texture coordinates
        if texcoords is not None and len(texcoords) > 0:
            for vt in texcoords:
                if len(vt) >= 2:
                    f.write(f"vt {vt[0]:.6f} {vt[1]:.6f}\n")
        
        # Write normals
        if normals is not None and len(normals) > 0:
            for vn in normals:
                f.write(f"vn {vn[0]:.6f} {vn[1]:.6f} {vn[2]:.6f}\n")
        
        # Write faces
        for face in faces:
            # OBJ file indices start at 1, so add 1
            # If we have texture coordinates and normals, use the full format f v1/vt1/vn1 v2/vt2/vn2 v3/vt3/vn3
            # If we only have vertices, use the simple format f v1 v2 v3
            if (normals is not None and len(normals) > 0) and (texcoords is not None and len(texcoords) > 0):
                face_str = " ".join([f"{v+1}/{v+1}/{v+1}" for v in face])
            elif texcoords is not None and len(texcoords) > 0:
                face_str = " ".join([f"{v+1}/{v+1}" for v in face])
            elif normals is not None and len(normals) > 0:
                face_str = " ".join([f"{v+1}//{v+1}" for v in face])
            else:
                face_str = " ".join([f"{v+1}" for v in face])
                
            f.write(f"f {face_str}\n")